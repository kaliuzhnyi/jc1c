
#Область JКоннектор

// ======================================================================================================================
// © kaliuzhnyi
//
// Copyright 2017-2021 Ivan Kaliuzhnyi
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL: https://github.com/kaliuzhnyi/jc1c
//      https://infostart.ru/public/1517917/
// E-mail: kalyuzhny.ivan@gmail.com
// Версия: 1.0.7
// ======================================================================================================================

#Область ПрограммныйИнтерфейс

// Инициализация объекта коннектора
//
// Параметры:
//  ДанныеИсполняемогоФайла - ДвоичныеДанные, Строка - двоичные данные исполняемого файла,
//    либо путь к исполняемомум файлу на стороне сервера;
//  Хост - Строка - хост который будет прослушиваться HTTP сервером из исполняемого файла;
//  Порт - Число - порт который будет прослушиваться HTTP сервером из исполняемого файла;
//  Ключ - Строка - API ключ, который будет проверятся при отправке HTTP запросов к исполняемому файлу;
//  РежимОтладки - Булево - признак запуска в режиме отладки.
//
// Возвращаемое значение:
//  Структура - см. метод ОписаниеОбъектаКоннектора()
//
Функция Инициализировать(Знач ДанныеИсполняемогоФайла,
	Знач Хост = "localhost",
	Знач Порт = 8080,
	Знач Ключ = "",
	Знач ЛимитВремени = 0) Экспорт

	ОбъектКоннектора = ОписаниеОбъектаКоннектора();

	УстановитьДанныеИсполняемогоФайла(ОбъектКоннектора, ДанныеИсполняемогоФайла);
	УстановитьХост(ОбъектКоннектора, Хост);
	УстановитьПорт(ОбъектКоннектора, Порт);
	УстановитьКлюч(ОбъектКоннектора, Ключ);
	УстановитьЛимитВремени(ОбъектКоннектора, ЛимитВремени);

	Возврат ОбъектКоннектора;

КонецФункции

// Запуск коннектора - создание исполняемого файла, запуск исполняемого файла
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода Инициализировать();
//
// Возвращаемое значение:
//  Булево - результат запуска коннектора. Истина - коннектор успешно запущен и готов к работе,
//    в противном случае - Ложь.
//
Функция Запустить(ОбъектКоннектора) Экспорт

	ОбъектКоннектора.РезультатЗапуска.Успешно = Ложь;

	// Проверка Java
	Если Не ЗначениеЗаполнено(ОбъектКоннектора.SDK)
		И Не ПроверитьJava() Тогда
		ВызватьИсключение "JКоннектор: В системе отсутствет настроенная Java.";
	КонецЕсли;

	Если Не СоздатьИсполняемыйФайлКоннектора(ОбъектКоннектора) Тогда
		Возврат ОбъектКоннектора.РезультатЗапуска.Успешно;
	КонецЕсли;

	Если Не ЗапуститьИсполняемыйФайлКоннектора(ОбъектКоннектора) Тогда
		Возврат ОбъектКоннектора.РезультатЗапуска.Успешно;
	КонецЕсли;

	ОбъектКоннектора.РезультатЗапуска.Успешно = Истина;
	Возврат ОбъектКоннектора.РезультатЗапуска.Успешно;

КонецФункции

// Выполнение произвольного метода коннектором
//
// Параметры:
//  ОбъектКоннектора - Структура - результат метода JКоннектор.Инициализировать();
//  ИмяМетода - Строка - имя метода который необходимо выполнить;
//  ПараметрМетода01 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода02 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода03 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода04 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода05 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода06 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода07 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода08 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода09 - Произвольный - параметр для передачи в вызываемый метод;
//  ПараметрМетода10 - Произвольный - параметр для передачи в вызываемый метод;
//
// Возвращаемое значение:
//  Неопределено, Произвольный - если не удалось выполнить метода возвращается Неопределено,
//    во всех остальных случаях тип результата зависит от того какое значанение было возвращено приложением Java.
//
Функция ВызватьМетод(ОбъектКоннектора,
	Знач ИмяМетода,
	Знач ПараметрМетода01 = Неопределено,
	Знач ПараметрМетода02 = Неопределено,
	Знач ПараметрМетода03 = Неопределено,
	Знач ПараметрМетода04 = Неопределено,
	Знач ПараметрМетода05 = Неопределено,
	Знач ПараметрМетода06 = Неопределено,
	Знач ПараметрМетода07 = Неопределено,
	Знач ПараметрМетода08 = Неопределено,
	Знач ПараметрМетода09 = Неопределено,
	Знач ПараметрМетода10 = Неопределено) Экспорт

	ПараметрыМетода = Новый Массив;
	Если ПараметрМетода01 <> Неопределено Тогда
		ПараметрыМетода.Добавить(ПараметрМетода01);
		Если ПараметрМетода02 <> Неопределено Тогда
			ПараметрыМетода.Добавить(ПараметрМетода02);
			Если ПараметрМетода03 <> Неопределено Тогда
				ПараметрыМетода.Добавить(ПараметрМетода03);
				Если ПараметрМетода04 <> Неопределено Тогда
					ПараметрыМетода.Добавить(ПараметрМетода04);
					Если ПараметрМетода05 <> Неопределено Тогда
						ПараметрыМетода.Добавить(ПараметрМетода05);
						Если ПараметрМетода06 <> Неопределено Тогда
							ПараметрыМетода.Добавить(ПараметрМетода06);
							Если ПараметрМетода07 <> Неопределено Тогда
								ПараметрыМетода.Добавить(ПараметрМетода07);
								Если ПараметрМетода08 <> Неопределено Тогда
									ПараметрыМетода.Добавить(ПараметрМетода08);
									Если ПараметрМетода09 <> Неопределено Тогда
										ПараметрыМетода.Добавить(ПараметрМетода09);
										Если ПараметрМетода10 <> Неопределено Тогда
											ПараметрыМетода.Добавить(ПараметрМетода10);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	РезультатМетода = Неопределено;
	ВыполнитьМетод(ОбъектКоннектора, ИмяМетода, ПараметрыМетода, РезультатМетода);

	Возврат РезультатМетода;

КонецФункции

// Выполнение произвольного метода коннектором
//
// Параметры:
//  ОбъектКоннектора - Структура - результат метода JКоннектор.Инициализировать();
//  ИмяМетода - Строка - имя метода который необходимо выполнить;
//  ПараметрыМетода - Массив - список параметров которые передаются в метод, порядок параметров обязан быть соблюден,
//    т.е. значения должны быть в том порядки в котором они описаны в объявлении метода(Java);
//  РезультатМетода - Соответствие, Неопределено - исходящий параметр,
//    в этот параметр будет помещен результат выполнения метода, т.е. то что возвращается из Java.
//
// Возвращаемое значение:
//  Булево - если метод успешно выполнен(а именно запрос успешно отправлен и получен ответ) то возвращается Истина,
//    в противном случае - Ложь.
//
Функция ВыполнитьМетод(ОбъектКоннектора,
	Знач ИмяМетода,
	Знач ПараметрыМетода = Неопределено,
	РезультатМетода = Неопределено) Экспорт

	ОбъектКоннектора.РезультатВыполненияМетода.Успешно = Ложь;

	ВыполнитьЗапросКИсполняемомуФайлу(ОбъектКоннектора, "POST", ИмяМетода, ПараметрыМетода);
	Если Не ОбъектКоннектора.ПоследнийЗапрос.Успешно Тогда
		Возврат ОбъектКоннектора.РезультатВыполненияМетода.Успешно;
	КонецЕсли;

	РезультатМетода = JsonВОбъект(ОбъектКоннектора.ПоследнийЗапрос.ТелоОтвета).Получить("result");

	ОбъектКоннектора.РезультатВыполненияМетода.Успешно = Истина;
	Возврат ОбъектКоннектора.РезультатВыполненияМетода.Успешно;

КонецФункции

// Остановка работы коннектора
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода Инициализировать();
//
// Возвращаемое значение:
//  Булево - если остановка прошла успешно(а именно порт освобожден и исполняемый файл удален) то возвращается - Истина,
//    в противном случае - Ложь.
//
Функция Остановить(ОбъектКоннектора) Экспорт

	ОбъектКоннектора.РезультатОстановки.Успешно = Ложь;

	// Освобождение порта.
	ВыполнитьЗапросКИсполняемомуФайлу(ОбъектКоннектора, "DELETE");
	Если Не ОбъектКоннектора.ПоследнийЗапрос.ОшибкаСоединения
		И Не ОбъектКоннектора.ПоследнийЗапрос.Успешно Тогда
		Возврат ОбъектКоннектора.РезультатОстановки.Успешно;
	КонецЕсли;

	// Удаление исполняемого файла.
	УдалитьИсполняемыйФайлКоннектораВФоне(ОбъектКоннектора);

	ОбъектКоннектора.РезультатОстановки.Успешно = Истина;
	Возврат ОбъектКоннектора.РезультатОстановки.Успешно;

КонецФункции

// Проверка работы коннекторы
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода JКоннектор.Инициализировать();
//
// Возвращаемое значение:
//  Булево - если коннектор работает(а именно при отправки запроса приходит необходимый ответ) возвращается - Истина,
//    в противном случае - Ложь.
//
Функция Проверить(ОбъектКоннектора) Экспорт

	ВыполнитьЗапросКИсполняемомуФайлу(ОбъектКоннектора, "GET");
	ОбъектКоннектора.РезультатПроверки.Успешно = ОбъектКоннектора.ПоследнийЗапрос.Успешно;

	Возврат ОбъектКоннектора.РезультатПроверки.Успешно;

КонецФункции

// Проверка/тестирование занятости порта, при выполнении данного метода не проверяется Ключ(API-ключ)
// в отличии от метода JКоннектор.Проверить()
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода JКоннектор.Инициализировать();
//
// Возвращаемое значение:
//  Булево - если порт коннектора занят возвращается Ложь, в противном случае Истина.
//
Функция Тестировать(ОбъектКоннектора) Экспорт

	ВыполнитьЗапросКИсполняемомуФайлу(ОбъектКоннектора, "HEAD");
	ОбъектКоннектора.РезультатТестирования.Успешно = Не ОбъектКоннектора.ПоследнийЗапрос.Успешно;

	Возврат ОбъектКоннектора.РезультатТестирования.Успешно

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьSDK(ОбъектКоннектора, SDK) Экспорт

	ОбъектКоннектора.SDK = SDK;

КонецПроцедуры

#Область ВыполнениеКоманд

// Проверка существования в системе настроенной Java
//
// Возвращаемое значение:
//  Булево - если в системе есть настроенная Java возвращается Истина, в противном случае Ложь.
//
Функция ПроверитьJava() Экспорт

	Результат = "";
	ВыполнитьСкрипт("java --version", Результат);
	Возврат Не ПустаяСтрока(Результат);

КонецФункции

// Получение установленной и настроенной в системе Java
//
// Возвращаемое значение:
//  Строка - версия Java
//
Функция ВерсияJava() Экспорт

	Результат = "";
	ВыполнитьСкрипт("java --version", Результат);
	Возврат Результат;

КонецФункции

// Получение списка существующих в системе SDK
//
// Возвращаемое значение:
//  Массив - если в системе нет SDK, возвращается пустой массив.
//
Функция НайтиJava() Экспорт

	Результат = Новый Массив;

	ДанныеПотокаВывода = "";
	ВыполнитьСкрипт("where java", ДанныеПотокаВывода);
	Если ЗначениеЗаполнено(ДанныеПотокаВывода) Тогда
		Результат = СтрРазделить(ДанныеПотокаВывода, Символы.ПС, Ложь);
	КонецЕсли;

	Возврат Результат;

КонецФункции


// Пауза
//
// Параметры:
//  КоличествоСекунд - Число - количество секун на которое необходимо остановить выполнение кода
//
Процедура Пауза(Знач КоличествоСекунд = 1) Экспорт

	ВыполнитьСкрипт(СтрШаблон("timeout %1", Формат(КоличествоСекунд, "ЧДЦ=0; ЧН=0; ЧГ=0")),,, Истина);

КонецПроцедуры


Функция ВыполнитьСкрипт(Знач СтрокаКоманды,
	ДанныеПотокаВывода = Неопределено,
	ДанныеПотокаОшибок = Неопределено,
	ОжидатьЗавершения = Ложь) Экспорт

	// Формирование файла потока вывода и указание пути к файлу в команде.
	Если ДанныеПотокаВывода <> Неопределено Тогда
		ИмяФайлаПотокаВывода = ПолучитьИмяВременногоФайла("stdout.tmp");
		СтрокаКоманды = СтрокаКоманды + " > """ + ИмяФайлаПотокаВывода + """";
		ОжидатьЗавершения = Истина;
	КонецЕсли;

	// Формирование файла потока ошибок и указание пути к файлу в команде.
	Если ДанныеПотокаОшибок <> Неопределено Тогда
		ИмяФайлаПотокаОшибок = ПолучитьИмяВременногоФайла("stderr.tmp");
		СтрокаКоманды = СтрокаКоманды + " 2>""" + ИмяФайлаПотокаОшибок + """";
		ОжидатьЗавершения = Истина;
	КонецЕсли;

	// Запуск файла скрипта и удаление.
	КодВозврата = Неопределено;

	Если ЭтоWindows() Тогда

		// Формирование файла скрипта.
		ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла("run.bat");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку("@echo off");
		ТекстовыйДокумент.ДобавитьСтроку("chcp " + Формат("65001", "ЧГ="));
		ТекстовыйДокумент.ДобавитьСтроку("cmd /S /C "" " + СтрокаКоманды + " """);
		ТекстовыйДокумент.Записать(ИмяФайлаСкрипта);

		Если ИнформационнаяБазаФайловая() Тогда
			Оболочка = Новый COMОбъект("Wscript.Shell");
			КодВозврата = Оболочка.Run(ИмяФайлаСкрипта, 0, ОжидатьЗавершения);
			Оболочка = Неопределено;
		Иначе
			ЗапуститьПриложение(ИмяФайлаСкрипта,, ОжидатьЗавершения, КодВозврата);
		КонецЕсли;

		// Не будем удалять батник, т.к. он удаляется слишком быстро после того как запустился,
		// и jar файл не успевает запустится.
		// К тому же размер батника пару килобайт, ничего страшного.
		//УдалитьФайлы(ИмяФайлаСкрипта);

	Иначе
		Если ЭтоLinux() Тогда
			СтрокаКоманды = "LANGUAGE=" + КодировкаТекста.UTF8 + " " + СтрокаКоманды;
		КонецЕсли;
		ЗапуститьПриложение(СтрокаКоманды,, ОжидатьЗавершения, КодВозврата);
	КонецЕсли;

	// Чтение потока вывода
	Если ДанныеПотокаВывода <> Неопределено Тогда
		ФайлПотокаВыводаИнфо = Новый Файл(ИмяФайлаПотокаВывода);
		Если ФайлПотокаВыводаИнфо.Существует() Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаПотокаВывода);
			ДанныеПотокаВывода = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяФайлаПотокаВывода);
		КонецЕсли;
	КонецЕсли;

	// Чтение потока ошибок
	Если ДанныеПотокаОшибок <> Неопределено Тогда
		ФайлПотокаОшибокИнфо = Новый Файл(ИмяФайлаПотокаОшибок);
		Если ФайлПотокаОшибокИнфо.Существует() Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаПотокаОшибок, КодировкаТекста.UTF8);
			ДанныеПотокаОшибок = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяФайлаПотокаОшибок);
		КонецЕсли;
	КонецЕсли;

	Возврат КодВозврата <> Неопределено И КодВозврата = 0;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеОбъектаКоннектора()

	Результат = Новый Структура;
	Результат.Вставить("SDK");
	Результат.Вставить("ДвоичныеДанныеИсполняемогоФайла");
	Результат.Вставить("ИсполняемыйФайл");

	Результат.Вставить("Хост");
	Результат.Вставить("Порт");
	Результат.Вставить("Ключ");
	Результат.Вставить("ЛимитВремени");

	Результат.Вставить("ПоследнийЗапрос", Новый Структура);
	Результат.ПоследнийЗапрос.Вставить("ОшибкаСоединения", Ложь);
	Результат.ПоследнийЗапрос.Вставить("Успешно", Ложь);
	Результат.ПоследнийЗапрос.Вставить("КодОтвета");
	Результат.ПоследнийЗапрос.Вставить("ЗаголовкиОтвета");
	Результат.ПоследнийЗапрос.Вставить("ТелоОтвета");

	Результат.Вставить("РезультатЗапуска", Новый Структура);
	Результат.РезультатЗапуска.Вставить("Успешно", Ложь);

	Результат.Вставить("РезультатПроверки", Новый Структура);
	Результат.РезультатПроверки.Вставить("Успешно", Ложь);

	Результат.Вставить("РезультатТестирования", Новый Структура);
	Результат.РезультатПроверки.Вставить("Успешно", Ложь);

	Результат.Вставить("РезультатВыполненияМетода", Новый Структура);
	Результат.РезультатВыполненияМетода.Вставить("Успешно", Ложь);

	Результат.Вставить("РезультатОстановки", Новый Структура);
	Результат.РезультатОстановки.Вставить("Успешно", Ложь);

	Возврат Результат;

КонецФункции


Процедура УстановитьДанныеИсполняемогоФайла(ОбъектКоннектора, Знач ДанныеИсполняемогоФайла)

	ТипПараметраДанныеИсполняемогоФайла = ТипЗнч(ДанныеИсполняемогоФайла);
	Если ТипПараметраДанныеИсполняемогоФайла = Тип("ДвоичныеДанные") Тогда
		ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла = ДанныеИсполняемогоФайла;
		ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
	ИначеЕсли ТипПараметраДанныеИсполняемогоФайла = Тип("Строка") Тогда

		Если ЭтоПутьКФайлу(ДанныеИсполняемогоФайла) Тогда
			// Строка с полным имененм файла.
			ФайлИнфо = Новый Файл(ДанныеИсполняемогоФайла);
			Если ФайлИнфо.Существует() Тогда
				ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла = Новый ДвоичныеДанные(ДанныеИсполняемогоФайла);
				ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
			Иначе
				ВызватьИсключение "JКоннектор: Некорректный путь к исполняемому файлу.";
			КонецЕсли;

		Иначе
			// Строка с имененм макета.
			Макет = Метаданные.ОбщиеМакеты.Найти(ДанныеИсполняемогоФайла);
			Если Макет <> Неопределено Тогда
				ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла = ПолучитьОбщийМакет(Макет.Имя);
				ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
			Иначе
				ВызватьИсключение "JКоннектор: Некорректной имя макета исполняемого файла.";
			КонецЕсли;

		КонецЕсли;

	Иначе
		ВызватьИсключение "JКоннектор: Некорректный формат данных исполняемого файла.";
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьХост(ОбъектКоннектора, Знач Хост = "localhost")

	ОбъектКоннектора.Хост = Хост;

КонецПроцедуры

Процедура УстановитьПорт(ОбъектКоннектора, Знач Порт = 8080)

	Если Порт < 0
		Или Порт > 65535 Тогда
		ВызватьИсключение "JКоннектор: Некорректное значение порта.";
	КонецЕсли;

	ОбъектКоннектора.Порт = Порт;

КонецПроцедуры

Процедура УстановитьКлюч(ОбъектКоннектора, Знач Ключ = "")

	ОбъектКоннектора.Ключ = Ключ;

КонецПроцедуры

Процедура УстановитьЛимитВремени(ОбъектКоннектора, Знач ЛимитВремени = 0)

	Если ЛимитВремени < 0 Тогда
		ВызватьИсключение "JКоннектор: Некорректное значение лимита времени.";
	КонецЕсли;

	ОбъектКоннектора.ЛимитВремени = ЛимитВремени;

КонецПроцедуры

#Область РаботаСИсполняемымФайлом

Процедура ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	ОбъектКоннектора.ИсполняемыйФайл = ПолучитьИмяВременногоФайла("jar");

КонецПроцедуры


Функция СоздатьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	Если Не ЗначениеЗаполнено(ОбъектКоннектора.ИсполняемыйФайл) Тогда
		ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
	КонецЕсли;

	ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла.Записать(ОбъектКоннектора.ИсполняемыйФайл);

	Возврат Истина;

КонецФункции

Функция ЗапуститьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	СтрокаКоманды = СтрШаблон("%1 -jar %2 ""%3"" ""%4"" ""%5"" ""%6""",
		?(ЗначениеЗаполнено(ОбъектКоннектора.SDK), ОбъектКоннектора.SDK, "java"),
		ОбъектКоннектора.ИсполняемыйФайл,
		ОбъектКоннектора.Хост,
		?(ОбъектКоннектора.Порт <> 0, Формат(ОбъектКоннектора.Порт, "ЧДЦ=0; ЧГ=0"), ""),
		ОбъектКоннектора.Ключ,
		?(ОбъектКоннектора.ЛимитВремени <> 0, Формат(ОбъектКоннектора.ЛимитВремени, "ЧДЦ=0; ЧГ=0"), ""));

	Возврат ВыполнитьСкрипт(СтрокаКоманды);

КонецФункции


Процедура УдалитьИсполняемыйФайлКоннектора(ОбъектКоннектора, Результат = Истина)

	Результат = Истина;

	Если Не ЗначениеЗаполнено(ОбъектКоннектора.ИсполняемыйФайл) Тогда
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ОбъектКоннектора.ИсполняемыйФайл);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		УдалитьФайлы(ОбъектКоннектора.ИсполняемыйФайл);
	Исключение
		Результат = Ложь;
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьИсполняемыйФайлКоннектораВФоне(ОбъектКоннектора, Знач ЭтоФоновоеЗадание = Ложь) Экспорт

	Если Не ЭтоФоновоеЗадание Тогда
		ПараметрыМетодаВФоне = Новый Массив;
		ПараметрыМетодаВФоне.Добавить(ОбъектКоннектора);
		ПараметрыМетодаВФоне.Добавить(Истина);
		ФоновыеЗадания.Выполнить("JКоннектор.УдалитьИсполняемыйФайлКоннектораВФоне",
			ПараметрыМетодаВФоне,,
			"JКоннектор: удаление временного исполняемого файла коннектора.");
		Возврат;
	КонецЕсли;

	Пауза(3);
	УдалитьИсполняемыйФайлКоннектора(ОбъектКоннектора);

КонецПроцедуры

#КонецОбласти

#Область РаботаСЗапросамиКИсполняемомуФайлу

Процедура ВыполнитьЗапросКИсполняемомуФайлу(ОбъектКоннектора,
	Знач ТипМетода,
	Знач ИмяМетода = Неопределено,
	Знач ПараметрыМетода = Неопределено)

	ОчиститьДанныеПоследнегоЗапроса(ОбъектКоннектора);

	HTTPСоединение = Новый HTTPСоединение(ОбъектКоннектора.Хост, ОбъектКоннектора.Порт);

	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = "/";
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("API-key", ОбъектКоннектора.Ключ);

	HTTPТело = "";
	Если ИмяМетода <> Неопределено Тогда

		Структура = Новый Структура;
		Структура.Вставить("method", ИмяМетода);

		Если ПараметрыМетода <> Неопределено Тогда

			ПараметрыМетодаДляОбработки = Новый Массив;
			Если ТипЗнч(ПараметрыМетода) <> Тип("Массив") Тогда
				ПараметрыМетодаДляОбработки.Добавить(ПараметрыМетода);
			Иначе
				ПараметрыМетодаДляОбработки = ПараметрыМетода;
			КонецЕсли;

			Для Индекс = 0 По ПараметрыМетодаДляОбработки.ВГраница() Цикл
				ПараметрМетода = ПараметрыМетодаДляОбработки[Индекс];
				Если ТипЗнч(ПараметрМетода) = Тип("ДвоичныеДанные") Тогда
					ПараметрыМетодаДляОбработки[Индекс] = ОбъектВBase64(ПараметрМетода);
				ИначеЕсли ТипЗнч(ПараметрМетода) = Тип("Дата") Тогда
					//ПараметрыМетодаДляОбработки[Индекс] = Формат(ПараметрМетода, "ДФ=yyyy-MM-ddTHH:mm:ssZ");
				КонецЕсли;
			КонецЦикла;

			Структура.Вставить("parameters", ПараметрыМетодаДляОбработки);

		КонецЕсли;

		HTTPТело = ОбъектВJson(Структура);

	КонецЕсли;

	HTTPЗапрос.УстановитьТелоИзСтроки(HTTPТело, КодировкаТекста.UTF8);

	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ТипМетода, HTTPЗапрос);
	Исключение
		ОбъектКоннектора.ПоследнийЗапрос.ОшибкаСоединения = Истина;
	КонецПопытки;

	//
	Если Не ОбъектКоннектора.ПоследнийЗапрос.ОшибкаСоединения Тогда
		ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора,
			HTTPОтвет.КодСостояния,
			HTTPОтвет.Заголовки,
			HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора,
	Знач КодОтвета = Неопределено,
	Знач ЗаголовкиОтвета = Неопределено,
	Знач ТелоОтвета = Неопределено)

	ОбъектКоннектора.ПоследнийЗапрос.Успешно = КодОтвета <> Неопределено И КодОтвета = 200;
	ОбъектКоннектора.ПоследнийЗапрос.КодОтвета = КодОтвета;
	ОбъектКоннектора.ПоследнийЗапрос.ЗаголовкиОтвета = ЗаголовкиОтвета;
	ОбъектКоннектора.ПоследнийЗапрос.ТелоОтвета = ТелоОтвета;

КонецПроцедуры

Процедура ОчиститьДанныеПоследнегоЗапроса(ОбъектКоннектора)

	ОбъектКоннектора.ПоследнийЗапрос.ОшибкаСоединения = Ложь;
	ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора);

КонецПроцедуры

#Область Json

Функция ОбъектВJson(Объект)

	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;

	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);

	ЗаписатьJSON(ЗаписьJSON, Объект, НастройкиСериализацииJSON);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция JsonВОбъект(Json)

	ЧтениеJSON = Новый ЧтениеJSON;
	Если ТипЗнч(Json) = Тип("ДвоичныеДанные") Тогда
		ЧтениеJSON.ОткрытьПоток(Json.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
	ИначеЕсли ТипЗнч(Json) = Тип("Строка") Тогда
		ЧтениеJSON.УстановитьСтроку(Json);
	Иначе
		ЧтениеJSON.ОткрытьПоток(Json, КодировкаТекста.UTF8);
	КонецЕсли;

	Объект = ПрочитатьJSON(ЧтениеJSON, Истина,, ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();

	Возврат Объект;

КонецФункции

#КонецОбласти

#Область Base64

Функция ОбъектВBase64(Знач Объект) Экспорт

	Результат = Base64Строка(Объект);
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");

	Возврат Результат;

КонецФункции

Функция Base64ВОбъект(Знач Base64) Экспорт

	Результат = Base64Значение(Base64);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Коллекции

Функция КоллекциюВСтроку(Знач Коллекция) Экспорт

	РазделительКлючаИЗначения = ": ";

	МассивСтрок = Новый Массив;
	Для Каждого КлючИЗначение Из Коллекция Цикл
		МассивСтрок.Добавить(СтрШаблон("%1%2%3",
			КлючИЗначение.Ключ,
			РазделительКлючаИЗначения,
			КлючИЗначение.Значение));
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок, Символы.ПС);

КонецФункции

Функция СтрокуВКоллекцию(Знач Строка) Экспорт

	РазделительКлючаИЗначения = ": ";

	Результат = Новый Соответствие;

	МассивСтрок = СтрРазделить(Строка, Символы.ПС, Ложь);
	Для Каждого Строка Из МассивСтрок Цикл

		ПозицияРазделителя = СтрНайти(Строка, РазделительКлючаИЗначения);
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;

		Результат.Вставить(Сред(Строка, 1, ПозицияРазделителя - 1),
			Сред(Строка, ПозицияРазделителя + СтрДлина(РазделительКлючаИЗначения)));

	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая()

	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 1;

КонецФункции

// Возвращает Истина, если текущий сеанс выполняется на сервере, работающем под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево - Истина, если сервер работает под управлением ОС Windows.
//
Функция ЭтоWindows()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;

КонецФункции

// Возвращает Истина, если текущий сеанс выполняется на сервере, работающем под управлением ОС Linux.
//
// Возвращаемое значение:
//  Булево - Истина, если сервер работает под управлением ОС Linux.
//
Функция ЭтоLinux()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;

КонецФункции

// Возвращает Истина, если значение является путем к файлу.
//
// Возвращаемое значение:
//  Булево - Истина, если значение является путем к файлу.
//
Функция ЭтоПутьКФайлу(Знач Значение)

	Возврат (СтрНайти(Значение, "/") <> 0 Или СтрНайти(Значение, "\") <> 0) И СтрНайти(Значение, ".") <> 0;

КонецФункции

#КонецОбласти

#КонецОбласти