
#Область JКоннектор

// ======================================================================================================================
// © kaliuzhnyi
//
// Copyright 2017-2021 Ivan Kaliuzhnyi
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL: https://github.com/kaliuzhnyi/jc1c
//      https://infostart.ru/public/1517917/
// E-mail: kalyuzhny.ivan@gmail.com
// Версия: 1.0.1
// ======================================================================================================================

#Область ПрограммныйИнтерфейс

// Инициализация объекта коннектора
//
// Параметры:
//  ДанныеИсполняемогоФайла - ДвоичныеДанные, Строка - двоичные данные исполняемого файла,
//    либо путь к исполняемомум файлу на стороне сервера;
//  Хост - Строка - хост который будет прослушиваться HTTP сервером из исполняемого файла;
//  Порт - Число - порт который будет прослушиваться HTTP сервером из исполняемого файла;
//  Ключ - Строка - API ключ, который будет проверятся при отправке HTTP запросов к исполняемому файлу;
//  РежимОтладки - Булево - признак запуска в режиме отладки.
//
// Возвращаемое значение:
//  Структура - см. метод ОписаниеОбъектаКоннектора()
//
Функция Инициализировать(Знач ДанныеИсполняемогоФайла,
	Знач Хост = "localhost",
	Знач Порт = 8080,
	Знач Ключ = "",
	Знач SDK = Неопределено,
	Знач РежимОтладки = Ложь) Экспорт

	ОбъектКоннектора = ОписаниеОбъектаКоннектора();
	ОбъектКоннектора.РежимОтладки = РежимОтладки;
	ОбъектКоннектора.SDK = SDK;

	ТипПараметраДанныеИсполняемогоФайла = ТипЗнч(ДанныеИсполняемогоФайла);
	Если ТипПараметраДанныеИсполняемогоФайла = Тип("ДвоичныеДанные") Тогда
		ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла = ДанныеИсполняемогоФайла;
		ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
	ИначеЕсли ТипПараметраДанныеИсполняемогоФайла = Тип("Строка") Тогда
		ОбъектКоннектора.ИсполняемыйФайл = ДанныеИсполняемогоФайла;
		ОпределитьДвоичныеДанныеКоннектора(ОбъектКоннектора);
	Иначе
		ВызватьИсключение "Неверный формат данных исполняемого файла.";
	КонецЕсли;

	ОбъектКоннектора.Хост = Хост;
	ОбъектКоннектора.Порт = Порт;
	ОбъектКоннектора.Ключ = Ключ;
	ОпределитьАдресЗапросовКоннектора(ОбъектКоннектора);

	Возврат ОбъектКоннектора;

КонецФункции

// Запуск коннектора - создание исполняемого файла, запуск исполняемого файла
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода Инициализировать();
//
// Возвращаемое значение:
//  Булево - результат запуска коннектора. Истина - коннектор успешно запущен и готов к работе,
//    в противном случае - Ложь.
//
Функция Запустить(ОбъектКоннектора) Экспорт

	Если Не ОбъектКоннектора.РежимОтладки Тогда
		СоздатьИсполняемыйФайлКоннектора(ОбъектКоннектора);
	КонецЕсли;

	Возврат ЗапуститьИсполняемыйФайлКоннектора(ОбъектКоннектора);

КонецФункции

// Выполнение произвольного метода коннектором
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода Инициализировать();
//  ИмяМетода - Строка - имя метода который необходимо выполнить;
//  ПараметрыМетода - Массив - список параметров которые передаются в метод, порядок параметров обязан быть соблюден,
//    т.е. значения должны быть в том порядки в котором они описаны в объявлении метода(Java);
//  РезультатМетода - Соответствие, Неопределено - результат віполнения метода, т.е. то что возвращается из Java.
//
// Возвращаемое значение:
//  Булево - если метод успешно выполнен(а именно запрос успешно отправлен и получен ответ) то возвращается Истина,
//    в противном случае - Ложь.
//
Функция ВыполнитьМетод(ОбъектКоннектора,
	Знач ИмяМетода,
	Знач ПараметрыМетода = Неопределено,
	РезультатМетода = Неопределено) Экспорт

	Если ТипЗнч(ПараметрыМетода) <> Тип("Массив") Тогда
		ПараметрыМетода = Новый Массив;
	Иначе
		Для Индекс = 0 По ПараметрыМетода.ВГраница() Цикл
			ПараметрМетода = ПараметрыМетода[Индекс];
			Если ТипЗнч(ПараметрМетода) = Тип("Дата") Тогда
				ПараметрыМетода[Индекс] = Формат(ПараметрМетода, "ДФ=yyyy-MM-ddTHH:mm:ssZ");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПараметрыВызоваМетода = Новый Структура;
	ПараметрыВызоваМетода.Вставить("Заголовки", Новый Соответствие);
	ПараметрыВызоваМетода.Заголовки.Вставить("API-key", ОбъектКоннектора.Ключ);
	ПараметрыВызоваМетода.Вставить("Json", Новый Структура);
	ПараметрыВызоваМетода.Json.Вставить("method", ИмяМетода);
	ПараметрыВызоваМетода.Json.Вставить("parameters", ПараметрыМетода);
	ПараметрыВызоваМетода.Вставить("ПараметрыПреобразованияJSON", Новый Структура);
	ПараметрыВызоваМетода.ПараметрыПреобразованияJSON.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);

	РезультатВызоваМетода = КоннекторHTTP().ВызватьМетод("POST", ОбъектКоннектора.URL, ПараметрыВызоваМетода);
	ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора, РезультатВызоваМетода);

	Если ОбъектКоннектора.ПоследнийЗапрос.КодОтвета <> 200 Тогда
		Возврат Ложь;
	КонецЕсли;

	РезультатМетода = КоннекторHTTP().КакJson(РезультатВызоваМетода).Получить("result");

	Возврат Истина;

КонецФункции

// Остановка работы коннектора
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода Инициализировать();
//
// Возвращаемое значение:
//  Булево - если остановка прошла успешно(а именно порт освобожден и исполняемый файл удален) то возвращается - Истина,
//    в противном случае - Ложь.
//
Функция Остановить(ОбъектКоннектора) Экспорт

	// Освобождение порта.
	Если Не ОбъектКоннектора.РезультатОстановки.ПортОсвобожден Тогда

		Попытка

			ПараметрыВызоваМетода = Новый Структура;
			ПараметрыВызоваМетода.Вставить("Заголовки", Новый Соответствие);
			ПараметрыВызоваМетода.Заголовки.Вставить("API-key", ОбъектКоннектора.Ключ);

			РезультатВызоваМетода = КоннекторHTTP().ВызватьМетод("DELETE", ОбъектКоннектора.URL, ПараметрыВызоваМетода);
			ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора, РезультатВызоваМетода);

			ОбъектКоннектора.РезультатОстановки.ПортОсвобожден = ОбъектКоннектора.ПоследнийЗапрос.КодОтвета = 200;

		Исключение
			ОбъектКоннектора.РезультатОстановки.ПортОсвобожден = Истина;
		КонецПопытки;

	КонецЕсли;

	// Удаление исполняемого файла.
	Если Не ОбъектКоннектора.РезультатОстановки.ИсполняемыйФайлУдален
		И ОбъектКоннектора.РезультатОстановки.ПортОсвобожден Тогда

		Если Не ОбъектКоннектора.РежимОтладки Тогда
			ОбъектКоннектора.РезультатОстановки.ИсполняемыйФайлУдален = УдалитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
		КонецЕсли;

	КонецЕсли;

	Возврат ОбъектКоннектора.РезультатОстановки.ПортОсвобожден
		И ОбъектКоннектора.РезультатОстановки.ИсполняемыйФайлУдален;

КонецФункции

// Проверка работы коннекторы
//
// Параметры:
//  ОбъектКоннектора - Структура - см. метод ОписаниеОбъектаКоннектора(), это результат метода Инициализировать();
//
// Возвращаемое значение:
//  Булево - если коннектор работает(а именно при отправки запроса приходит необходимый ответ) возвращается - Истина,
//    в противном случае - Ложь.
//
Функция Проверить(ОбъектКоннектора) Экспорт

	ПараметрыВызоваМетода = Новый Структура;

	ПараметрыВызоваМетода.Вставить("Заголовки", Новый Соответствие);
	ПараметрыВызоваМетода.Заголовки.Вставить("API-key", ОбъектКоннектора.Ключ);

	РезультатВызоваМетода = КоннекторHTTP().ВызватьМетод("GET", ОбъектКоннектора.URL, ПараметрыВызоваМетода);
	ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора, РезультатВызоваМетода);

	Возврат ОбъектКоннектора.ПоследнийЗапрос.КодОтвета = 200;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеОбъектаКоннектора()

	Результат = Новый Структура;
	Результат.Вставить("SDK");
	Результат.Вставить("ДвоичныеДанныеИсполняемогоФайла");
	Результат.Вставить("ИсполняемыйФайл");

	Результат.Вставить("Хост");
	Результат.Вставить("Порт");
	Результат.Вставить("Ключ");
	Результат.Вставить("URL");

	Результат.Вставить("РежимОтладки");

	Результат.Вставить("ПоследнийЗапрос", Новый Структура);
	Результат.ПоследнийЗапрос.Вставить("КодОтвета");
	Результат.ПоследнийЗапрос.Вставить("ЗаголовкиОтвета");
	Результат.ПоследнийЗапрос.Вставить("ТелоОтвета");

	Результат.Вставить("РезультатОстановки", Новый Структура);
	Результат.РезультатОстановки.Вставить("ПортОсвобожден", Ложь);
	Результат.РезультатОстановки.Вставить("ИсполняемыйФайлУдален", Ложь);

	Возврат Результат;

КонецФункции

#Область РаботаСИсполняемымФайлом

Процедура ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	ОбъектКоннектора.ИсполняемыйФайл = ПолучитьИмяВременногоФайла("jar");

КонецПроцедуры

Процедура ОпределитьДвоичныеДанныеКоннектора(ОбъектКоннектора)

	ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла = Новый ДвоичныеДанные(ОбъектКоннектора.ИсполняемыйФайл);

КонецПроцедуры


Процедура СоздатьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	Если Не ЗначениеЗаполнено(ОбъектКоннектора.ИсполняемыйФайл) Тогда
		ОпределитьИсполняемыйФайлКоннектора(ОбъектКоннектора);
	КонецЕсли;

	ОбъектКоннектора.ДвоичныеДанныеИсполняемогоФайла.Записать(ОбъектКоннектора.ИсполняемыйФайл);

КонецПроцедуры

Функция ЗапуститьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	СтрокаКоманды = СтрШаблон("%1 -jar %2 ""%3"" ""%4"" ""%5""",
		?(ЗначениеЗаполнено(ОбъектКоннектора.SDK), ОбъектКоннектора.SDK, "java"),
		ОбъектКоннектора.ИсполняемыйФайл,
		ОбъектКоннектора.Хост,
		?(ОбъектКоннектора.Порт <> 0, Формат(ОбъектКоннектора.Порт, "ЧДЦ=0; ЧГ=0"), ""),
		ОбъектКоннектора.Ключ);

	РежимОтображенияОкна = 0; // 0 – скрывает окно, будет виден только процесс в диспетчере задач; 1 - нормальный режим; 2 – свернутый вид; 3 – развернутый вид;
	ОжидатьЗавершения = Ложь;

	Shell = Новый COMОбъект("WScript.Shell");
	КодВозврата = Shell.run(СтрокаКоманды, РежимОтображенияОкна, ОжидатьЗавершения);

	Возврат КодВозврата = 0;

КонецФункции

Функция УдалитьИсполняемыйФайлКоннектора(ОбъектКоннектора)

	Если Не ЗначениеЗаполнено(ОбъектКоннектора.ИсполняемыйФайл) Тогда
		Возврат Истина;
	КонецЕсли;

	Файл = Новый Файл(ОбъектКоннектора.ИсполняемыйФайл);
	Если Не Файл.Существует() Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка
		УдалитьФайлы(ОбъектКоннектора.ИсполняемыйФайл);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область РаботаСЗапросамиКИсполняемомуФайлу

Процедура ОпределитьАдресЗапросовКоннектора(ОбъектКоннектора)

	ОбъектКоннектора.URL = СтрШаблон("http://%1:%2", ОбъектКоннектора.Хост, ОбъектКоннектора.Порт);

КонецПроцедуры

Процедура ЗаполнитьДанныеПоследнегоЗапроса(ОбъектКоннектора, РезультатВызоваМетода)

	ОбъектКоннектора.ПоследнийЗапрос.КодОтвета = РезультатВызоваМетода.КодСостояния;
	ОбъектКоннектора.ПоследнийЗапрос.ЗаголовкиОтвета = РезультатВызоваМетода.Заголовки;
	ОбъектКоннектора.ПоследнийЗапрос.ТелоОтвета = КоннекторHTTP.КакТекст(РезультатВызоваМетода, КодировкаТекста.UTF8);

КонецПроцедуры

#КонецОбласти

Функция КоннекторHTTP()

	Возврат КоннекторHTTP;

	//ОбъектОбщегоМодуля = Метаданные.ОбщиеМодули.Найти("КоннекторHTTP");
	//Возврат ?(ОбъектОбщегоМодуля <> Неопределено, КоннекторHTTP, JКоннектор);

КонецФункции

#КонецОбласти

#КонецОбласти